// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RolePermission.Model;

namespace RolePermission.Model.Migrations
{
    [DbContext(typeof(RolePermissionEntities))]
    partial class RolePermissionEntitiesModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RolePermission.Model.Relationship.MenuFunc", b =>
                {
                    b.Property<int>("MenuId");

                    b.Property<int>("FuncId");

                    b.HasKey("MenuId", "FuncId");

                    b.HasIndex("FuncId");

                    b.ToTable("MenuFunc");
                });

            modelBuilder.Entity("RolePermission.Model.Relationship.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("RolePermission.Model.SMFIELD", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CREATEPERSON")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CREATETIME");

                    b.Property<string>("MYCOLUMS")
                        .HasMaxLength(50);

                    b.Property<string>("MYTABLES")
                        .HasMaxLength(50);

                    b.Property<string>("MYTEXTS")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MYVALUES");

                    b.Property<int?>("PARENTID")
                        .HasMaxLength(36);

                    b.Property<string>("REMARK")
                        .HasMaxLength(200);

                    b.Property<decimal?>("SORT");

                    b.Property<string>("UPDATEPERSON")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UPDATETIME");

                    b.HasKey("ID");

                    b.HasIndex("PARENTID");

                    b.ToTable("SMFIELD");
                });

            modelBuilder.Entity("RolePermission.Model.SMFUNCTB", b =>
                {
                    b.Property<int>("FUNC_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CLASS_NAME");

                    b.Property<string>("EVENT_NAME");

                    b.Property<string>("FUNC_CODE");

                    b.Property<string>("FUNC_NAME");

                    b.Property<string>("ICONIC");

                    b.Property<int?>("ORDERCODE");

                    b.Property<string>("PARENTFUNC_CODE");

                    b.Property<string>("SM_SYSTEM");

                    b.Property<string>("STATUS");

                    b.HasKey("FUNC_ID");

                    b.ToTable("SMFUNCTB");
                });

            modelBuilder.Entity("RolePermission.Model.SMLOG", b =>
                {
                    b.Property<int>("LOG_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CLASSNAME")
                        .HasMaxLength(100);

                    b.Property<string>("FUNC_CODE")
                        .HasMaxLength(32);

                    b.Property<DateTime?>("LOG_DATETIME");

                    b.Property<string>("OPERATION_TYPE");

                    b.Property<string>("REMARK")
                        .HasMaxLength(4000);

                    b.Property<int?>("USER_ID");

                    b.HasKey("LOG_ID");

                    b.HasIndex("USER_ID");

                    b.ToTable("SMLOG");
                });

            modelBuilder.Entity("RolePermission.Model.SMMENUROLEFUNCTB", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FUNC_ID");

                    b.Property<int?>("MENUID");

                    b.Property<int?>("ROLEID");

                    b.HasKey("ID");

                    b.HasIndex("FUNC_ID");

                    b.HasIndex("MENUID");

                    b.HasIndex("ROLEID");

                    b.ToTable("SMMENUROLEFUNCTB");
                });

            modelBuilder.Entity("RolePermission.Model.SMMENUTB", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CREATEPERSON")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CREATETIME");

                    b.Property<string>("ICONIC")
                        .HasMaxLength(200);

                    b.Property<string>("ISLEAF")
                        .HasMaxLength(20);

                    b.Property<int?>("MENULEVEL");

                    b.Property<string>("NAME")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("PARENTID");

                    b.Property<string>("REMARK")
                        .HasMaxLength(4000);

                    b.Property<int?>("SORT");

                    b.Property<string>("STATE")
                        .HasMaxLength(200);

                    b.Property<string>("UPDATEPERSON")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UPDATETIME");

                    b.Property<string>("URL")
                        .HasMaxLength(200);

                    b.HasKey("ID");

                    b.HasIndex("PARENTID");

                    b.ToTable("SMMENUTB");
                });

            modelBuilder.Entity("RolePermission.Model.SMROLETB", b =>
                {
                    b.Property<int>("ROLE_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CREATION_TIME");

                    b.Property<int?>("CREATION_USER");

                    b.Property<string>("REMARK")
                        .HasMaxLength(100);

                    b.Property<string>("ROLE_NAME")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("STATUS")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<DateTime?>("UPDATE_TIME");

                    b.Property<int?>("UPDATE_USER");

                    b.HasKey("ROLE_ID");

                    b.HasIndex("CREATION_USER");

                    b.HasIndex("UPDATE_USER");

                    b.ToTable("SMROLETB");
                });

            modelBuilder.Entity("RolePermission.Model.SMUSERTB", b =>
                {
                    b.Property<int>("USER_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("COMPONENT_ID");

                    b.Property<DateTime?>("CREATION_TIME");

                    b.Property<int?>("CREATION_USER");

                    b.Property<string>("GENDER")
                        .HasMaxLength(2);

                    b.Property<int?>("ISAUDIT");

                    b.Property<string>("STATUS")
                        .IsRequired();

                    b.Property<DateTime?>("UPDATE_TIME");

                    b.Property<int?>("UPDATE_USER");

                    b.Property<string>("USER_NAME")
                        .HasMaxLength(20);

                    b.Property<string>("U_ID")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("U_PASSWORD")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("USER_ID");

                    b.HasIndex("CREATION_USER");

                    b.HasIndex("UPDATE_USER");

                    b.ToTable("SMUSERTB");
                });

            modelBuilder.Entity("RolePermission.Model.Relationship.MenuFunc", b =>
                {
                    b.HasOne("RolePermission.Model.SMFUNCTB", "Func")
                        .WithMany("SMMENUTB")
                        .HasForeignKey("FuncId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RolePermission.Model.SMMENUTB", "Menu")
                        .WithMany("SMFUNCTB")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RolePermission.Model.Relationship.UserRole", b =>
                {
                    b.HasOne("RolePermission.Model.SMROLETB", "Role")
                        .WithMany("SMUSERTB2")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RolePermission.Model.SMUSERTB", "User")
                        .WithMany("SMROLETB2")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RolePermission.Model.SMFIELD", b =>
                {
                    b.HasOne("RolePermission.Model.SMFIELD", "SMFIELD2")
                        .WithMany("SMFIELD1")
                        .HasForeignKey("PARENTID");
                });

            modelBuilder.Entity("RolePermission.Model.SMLOG", b =>
                {
                    b.HasOne("RolePermission.Model.SMUSERTB", "SMUSERTB")
                        .WithMany("SMLOG")
                        .HasForeignKey("USER_ID");
                });

            modelBuilder.Entity("RolePermission.Model.SMMENUROLEFUNCTB", b =>
                {
                    b.HasOne("RolePermission.Model.SMFUNCTB", "SMFUNCTB")
                        .WithMany("SMMENUROLEFUNCTB")
                        .HasForeignKey("FUNC_ID");

                    b.HasOne("RolePermission.Model.SMMENUTB", "SMMENUTB")
                        .WithMany("SMMENUROLEFUNCTB")
                        .HasForeignKey("MENUID");

                    b.HasOne("RolePermission.Model.SMROLETB", "SMROLETB")
                        .WithMany("SMMENUROLEFUNCTB")
                        .HasForeignKey("ROLEID");
                });

            modelBuilder.Entity("RolePermission.Model.SMMENUTB", b =>
                {
                    b.HasOne("RolePermission.Model.SMMENUTB", "SMMENUTB2")
                        .WithMany("SMMENUTB1")
                        .HasForeignKey("PARENTID");
                });

            modelBuilder.Entity("RolePermission.Model.SMROLETB", b =>
                {
                    b.HasOne("RolePermission.Model.SMUSERTB", "SMUSERTB1")
                        .WithMany("SMROLETB1")
                        .HasForeignKey("CREATION_USER");

                    b.HasOne("RolePermission.Model.SMUSERTB", "SMUSERTB")
                        .WithMany("SMROLETB")
                        .HasForeignKey("UPDATE_USER");
                });

            modelBuilder.Entity("RolePermission.Model.SMUSERTB", b =>
                {
                    b.HasOne("RolePermission.Model.SMUSERTB", "SMUSERTB3")
                        .WithMany()
                        .HasForeignKey("CREATION_USER");

                    b.HasOne("RolePermission.Model.SMUSERTB", "SMUSERTB2")
                        .WithMany()
                        .HasForeignKey("UPDATE_USER");
                });
#pragma warning restore 612, 618
        }
    }
}
